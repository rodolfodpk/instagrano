basePath: /api
definitions:
  domain.MediaType:
    enum:
    - image
    - video
    type: string
    x-enum-varnames:
    - MediaTypeImage
    - MediaTypeVideo
  domain.Post:
    properties:
      caption:
        type: string
      comments_count:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      likes_count:
        type: integer
      media_type:
        $ref: '#/definitions/domain.MediaType'
      media_url:
        type: string
      score:
        type: number
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      views_count:
        type: integer
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  pagination.FeedResult:
    properties:
      has_more:
        type: boolean
      next_cursor:
        type: string
      posts:
        items: {}
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@instagrano.com
    name: API Support
  description: A mini Instagram API with posts, feed, likes, and comments
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Instagrano API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              token:
                type: string
              user:
                $ref: '#/definitions/domain.User'
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              user:
                $ref: '#/definitions/domain.User'
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /feed:
    get:
      description: Retrieve paginated feed using cursor-based pagination
      parameters:
      - description: Pagination cursor
        in: query
        name: cursor
        type: string
      - description: Number of posts (default 20, max 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pagination.FeedResult'
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user feed
      tags:
      - feed
  /posts:
    post:
      consumes:
      - multipart/form-data
      description: Upload image/video post with title and caption
      parameters:
      - description: Post title
        in: formData
        name: title
        required: true
        type: string
      - description: Post caption
        in: formData
        name: caption
        type: string
      - description: Media type (image or video)
        in: formData
        name: media_type
        required: true
        type: string
      - description: Media file
        in: formData
        name: media
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Post'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    get:
      description: Retrieve a single post with all details
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Post'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get post by ID
      tags:
      - posts
  /posts/{id}/comment:
    post:
      consumes:
      - application/json
      description: Add a comment to a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment text
        in: body
        name: request
        required: true
        schema:
          properties:
            text:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Comment on a post
      tags:
      - interactions
  /posts/{id}/like:
    post:
      description: Add a like to a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Like a post
      tags:
      - interactions
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
